@use "sass:math";
@use "constants" as *;
@use "functions" as *;

// HOVER NOT FOR SENSOR
@mixin hover($hasActiveEffectOnMobile: true) {
	@media (any-hover: hover) {
		&:hover {
			@content;
		}
	}

	@if ($hasActiveEffectOnMobile) {
		@media (any-hover: none) {
			&:active {
				@content;
			}
		}
	}
}
//  break word mixin
@mixin break-word {
	// чтобы очень длинные слова переносилсь
	& {
		overflow-wrap: break-word;
		word-wrap: break-word;
		word-break: break-all;
		word-break: break-word;
		hyphens: auto;
	}
}

@mixin hoverSlideBgText($color, $hoverColor, $position: 100%, $transition: background 0.3s) {
	background-image: linear-gradient(to right, $hoverColor, $hoverColor 50%, $color 50%);
	background-size: 200% 100%;
	background-position: $position;
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
	transition: $transition;

	@media (any-hover: hover) {
		&:hover {
			background-position: 0;
		}
	}
}

@mixin hoverSlideBg($color, $hoverColor, $transition: all 0.3s, $position: 100%, $textColor: $color) {
	background-image: linear-gradient(to right, $hoverColor, $hoverColor 50%, $color 50%);
	background-size: calc(200% + 4px) calc(100% + 4px);
	background-position: $position;
	transition: $transition;

	@media (any-hover: hover) {
		&:hover {
			background-position: 0;
			color: $textColor;
		}
	}
}

@mixin hoverLine(
	$mode: slide,
	$hoverColor: var(--color-accent),
	$height: 0.2em,
	$paddingBottom: $height,
	$transition: var(--duration-fast),
	$bd-r: 0,
) {
	position: relative;
	padding-block: $paddingBottom;
	margin-block: -#{$paddingBottom};
	overflow: hidden;
	//margin-bottom: -$paddingBottom;

	&::before {
		content: "";
		position: absolute;
		bottom: 0;
		@if ($mode == slide) {
			width: 0;
		}
		@if ($mode == center) {
			left: 50%;
			right: 50%;
		}
		@if ($mode == up) {
			left: 0;
			right: 0;
			transform: translateY(200%);
		}
		height: $height;
		background: $hoverColor;
		border-radius: $bd-r;
		transition: all $transition;
	}

	@include hover {
		@content;
		&::before {
			@if ($mode == slide) {
				width: 100%;
			}
			@if ($mode == center) {
				left: 0;
				right: 0;
			}
			@if ($mode == up) {
				transform: translateY(0);
			}
		}
	}
}

// triangle
// https://htmlbook.ru/blog/treugolniki-cherez-css
@mixin triangle($size: 100px, $color: orangered, $type: "top") {
	@if ($type == "top") {
		border: $size solid transparent;
		border-top: $size solid $color;
	}

	@if ($type == "right") {
		border: $size solid transparent;
		border-right: $size solid $color;
	}

	@if ($type == "bottom") {
		border: $size solid transparent;
		border-bottom: $size solid $color;
	}

	@if ($type == "left") {
		border: $size solid transparent;
		border-left: $size solid $color;
	}

	@if ($type == "top-right") {
		border: $size solid transparent;
		border-top: $size solid $color;
		border-right: $size solid $color;
	}

	@if ($type == "bottom-right") {
		border: $size solid transparent;
		border-right: $size solid $color;
		border-bottom: $size solid $color;
	}

	@if ($type == "bottom-left") {
		border: $size solid transparent;
		border-bottom: $size solid $color;
		border-left: $size solid $color;
	}

	@if ($type == "top-left") {
		border: $size solid transparent;
		border-left: $size solid $color;
		border-top: $size solid $color;
	}
}

@mixin counter($hasZero: true, $selector: "& > *") {
	counter-reset: order; // order - это имя, которое мы даём сами, можно как угодно назвать: order, number, counter и т.п.

	@if ($hasZero == true) {
		#{$selector}::before {
			counter-increment: order; // в качестве значения свойства counter-increment повторяем значение свойства counter-reset (в нашем случае order)
			content: "0"
				counter(order); // эта строчка непосредственно создаёт нумерацию с добавлением 0 (нуля) перед каждой цифрой
		}

		// уточняем, что в нумерации все цифры, начиная с 10, будут писаться без 0 (нуля) перед ними
		#{$selector}:nth-child(n + 10)::before {
			content: counter(order);
		}
	} @else {
		#{$selector}::before {
			counter-increment: order; // в качестве значения свойства counter-increment повторяем значение свойства counter-reset (в нашем случае order)
			content: counter(order); // эта строчка непосредственно создаёт нумерацию
		}
	}
}

// FONT-FACE MIXIN
@mixin font-face($font-family, $file-path, $weight: 400, $style: normal) {
	@font-face {
		font-family: $font-family;
		font-weight: $weight;
		font-style: $style;
		font-display: swap;
		src: url("#{$file-path}.eot");
		src:
			url("#{$file-path}.eot?#iefix") format("embedded-opentype"),
			url("#{$file-path}.woff2") format("woff2"),
			url("#{$file-path}.woff") format("woff"),
			url("#{$file-path}.ttf") format("truetype");
	}
}
@mixin reset {
	padding: 0;
	margin: 0;
}

@mixin reset-child {
	& > *:first-child {
		padding-top: unset;
		margin-top: unset;
	}
	& > *:last-child {
		padding-bottom: unset;
		margin-bottom: unset;
	}
}

@mixin animationFix {
	backface-visibility: hidden;
}

@mixin bgimg($imgPosition: center, $imgFit: cover, $height: 100%, $width: 100%) {
	img,
	video,
	picture,
	source {
		position: absolute;
		top: 0;
		left: 0;
		width: $width;
		height: $height;
		object-fit: $imgFit;
		object-position: $imgPosition;
	}
}

@mixin bgColorImg($color, $img, $position: center, $size: cover, $repeat: no-repeat) {
	background: $color $img $position / $size $repeat;
}

@function lsFromPercentToEm($percent) {
	@return calc($percent / 100) + em;
}

@mixin retinaBg($url, $format: "jpg", $count: 3, $mainDir: "../images/") {
	$result: 'image-set(url("#{$mainDir}#{$url}.#{$format}") type("image/#{$format}") 1x';

	//$i: 1;
	@for $i from 1 to $count {
		$result: $result + ', url("#{$mainDir}#{$url}@#{$i + 1}x.#{$format}") type("image/#{$format}") #{$i + 1}x';
	}

	background-image: #{$result + ")"};
}

@mixin createOverlay($color, $pseudoEl: before, $z_index: 2) {
	&::#{$pseudoEl} {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: $z_index;
		background: $color;
		@content;
	}
}

@mixin autoValue($property, $startValue, $endValue, $endWidth: $finishBreakpoint, $startWidth: $templateWidth) {
	@if ($startWidth != $templateWidth) {
		@media (max-width: em($startWidth)) {
			#{$property}: $startValue;
		}
	} @else {
		#{$property}: $startValue;
	}
	@media (max-width: em($endWidth)) {
		#{$property}: $endValue;
	}
}

// Visibility
@mixin hide {
	opacity: 0;
	visibility: hidden;
}

@mixin show {
	opacity: 1;
	visibility: visible;
}

@mixin visually-hidden {
	position: absolute !important;
	width: 1px !important;
	height: 1px !important;
	margin: -1px !important;
	border: 0 !important;
	padding: 0 !important;
	white-space: nowrap !important;
	clip-path: inset(100%) !important;
	clip: rect(0 0 0 0) !important;
	overflow: hidden !important;
}

// Flex
@mixin flex-center($isInline: false) {
	@if $isInline {
		display: inline-flex;
	} @else {
		display: flex;
	}

	justify-content: center;
	align-items: center;
}

// ABS
@mixin abs($y: top, $x: left) {
	position: absolute;
	#{$y}: 0;
	#{$x}: 0;
}
@mixin abs-center {
	position: absolute;
	top: 50%;
	left: 50%;
	translate: -50% -50%;
}

@mixin abs-x {
	position: absolute;
	left: 50%;
	translate: -50%;
}

@mixin abs-y {
	position: absolute;
	top: 50%;
	translate: 0 -50%;
}

@mixin abs-cover {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

@mixin square($size) {
	width: $size;
	height: $size;
}

@mixin full-vw-centered-line($property: top, $left: 50%, $right: auto, $translate: -50%, $width: 100vw) {
	position: relative;

	&::before {
		content: "";
		position: absolute;
		left: $left;
		right: $right;
		#{$property}: 0;
		translate: $translate;
		width: $width;
		height: rem(1);
		background-color: var(--color-border);
	}
}

@mixin line-after-container(
	$height: 2px,
	$color: var(--color-accent),
	$property: bottom,
	$translateY: -50%,
	$left: 0,
	$right: auto,
	$containerWidth: var(--container-width),
	$containerPadding: var(--container-padding),
	$parentPosition: relative,
	$pseudoEl: before
) {
	$width: max($containerPadding, calc((100vw - $containerWidth) / 2));
	$translateX: -100%;
	@if $right == 0 {
		$translateX: 100%;
	}
	position: $parentPosition;

	&::#{$pseudoEl} {
		content: "";
		position: absolute;
		width: $width;
		height: $height;
		left: $left;
		right: $right;
		#{$property}: 0;
		background: $color;
		transform: translate($translateX, $translateY);
	}
}

@mixin media($screen, $width: max) {
	@media (#{$width}-width: em($screen)) {
		@content;
	}
}

@mixin focus {
	@supports selector(:focus-visible) {
		&:focus {
			outline: none;
		}
		&:focus-visible {
			@content;
		}
	}
}

@mixin uncontainer(
	$width: 50%,
	$gapRow: 30px,
	$gapCol: $gapRow,
	$wrap: false,
	$containerWidth: var(--container-width),
	$containerPadding: var(--container-padding)
) {
	display: flex;
	gap: $gapCol $gapRow;

	@if $wrap {
		flex-wrap: wrap;
	}
	@if $width == 100% {
		padding-left: unset;
		& > *:first-child,
		& > *:last-child {
			flex: 1 1 100%;
		}
	} @else {
		padding-left: max($containerPadding, calc((100% - $containerWidth) / 2));
		& > *:first-child {
			flex: 0 0 $width;
		}

		& > *:last-child {
			flex: 0 1 calc(100% - $width - $gapRow);
		}
	}
}

@mixin circleHover(
	$color: var(--color-accent),
	$positionStart: 100%,
	$positionEnd: 0,
	$translate: Y,
	$el: after,
	$duration: var(--duration-medium)
) {
	overflow: hidden;

	&::#{$el} {
		content: "";
		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: $color;
		border-radius: 50%;

		transform: translate#{$translate }($positionStart);
		transition: transform $duration;
	}

	@include hover {
		&::#{$el} {
			transform: translate#{$translate }($positionEnd);
		}
	}
}

@mixin custom-scroll($color, $bg, $width: auto) {
	scrollbar-color: $color $bg;
	scrollbar-width: $width;
}

@mixin floating-label($inputSelector: "input", $labelSelector: "label", $hasPlaceholder: true) {
	@if $hasPlaceholder {
		#{$inputSelector}:focus ~ #{$labelSelector},
		#{$inputSelector}:not(:placeholder-shown) ~ #{$labelSelector},
		#{$inputSelector}[required]:valid ~ #{$labelSelector},
		#{$inputSelector}.has-value ~ #{$labelSelector} {
			@content;
		}

		#{$inputSelector}::placeholder {
			opacity: 0;
			transition: opacity 0.3s;
		}

		#{$inputSelector}:focus {
			&::placeholder {
				opacity: 1;
			}
		}
	} @else {
		// При фокусе или если input заполнен без placeholder
		#{$inputSelector}:focus ~ #{$labelSelector},
		#{$inputSelector}[required]:valid ~ #{$labelSelector},
		#{$inputSelector}.has-value ~ #{$labelSelector} {
			@content;
		}
	}
}

@mixin tip($pos: "bottom-center", $offset: 2px, $pseudo-el: after, $attr: "aria-label") {
	// bottom / top / left / right;

	@include hover {
		&::#{$pseudo-el} {
			opacity: 1;
			visibility: visible;
		}
	}
	&::#{$pseudo-el} {
		content: attr(#{$attr});

		@if ($pos == left) {
			top: 0;
			left: -$offset;
			transform: translate(-100%, -0.1em);
		} @else if ($pos == "left-center") {
			top: 50%;
			left: -$offset;
			transform: translate(-100%, -50%);
		} @else if ($pos == right) {
			top: 0;
			right: -$offset;
			transform: translate(100%, -0.1em);
		} @else if ($pos == "right-center") {
			top: 50%;
			right: -$offset;
			transform: translate(100%, -50%);
		} @else if ($pos == bottom) {
			bottom: -$offset;
			left: 0;
			transform: translate(0, 100%);
		} @else if ($pos == "bottom-center") {
			bottom: -$offset;
			left: 50%;
			transform: translate(-50%, 100%);
		} @else if ($pos == top) {
			top: -$offset;
			left: 0;
			transform: translate(0, -100%);
		} @else {
			top: -$offset;
			left: 50%;
			transform: translate(-50%, -100%);
		}

		position: absolute;
		z-index: 2;
		width: max-content;
		background: var(--color-gray);
		padding: rem(8);
		border-radius: 4px;

		color: var(--color-light);
		line-height: 100%;
		font-size: rem(14);
		font-weight: 400;
		opacity: 0;
		visibility: hidden;
		transition: all var(--duration-fast);
	}
}
// убирает стрелки у input[type="number"]
@mixin delete-arrows-input-number {
	/* Chrome, Safari, Edge, Opera */
	input::-webkit-outer-spin-button,
	input::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}
	/* Firefox */
	input[type="number"] {
		-moz-appearance: textfield;
	}
}

@mixin gradient-text($color: linear-gradient(red, green)) {
	background: $color;
	background-clip: text;
	-webkit-background-clip: text;
	-webkit-text-fill-color: transparent;
}
@mixin decor-ball($top: 0, $left: 0, $size: big, $pseudo: after) {
	$blur: 0;
	$blur-mobile: $blur;

	@if ($size== big) {
		$size: adapt(300, 180);
		$blur: 150px;
		$blur-mobile: 130px;
	} @else {
		$size: adapt(200, 140);
		$blur: 110px;
		$blur-mobile: 100px;
	}

	&::#{$pseudo} {
		content: "";
		position: absolute;
		top: $top;
		left: $left;
		@include square($size);
		border-radius: 100%;
		background: var(--gradient);
		filter: blur($blur);
		z-index: 1;

		@include media($mobile-l) {
			filter: blur($blur-mobile);
		}
	}
	& > * {
		position: relative;
		z-index: 2;
	}
}
